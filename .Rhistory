echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 7)
plot_ly(diamonds, x = ~cut, color = "black")
---
```{r}
---
```{r}
---
```{r}
---
```{r}
---
```{r}
---
```{r}
---
```{r}
---
```{r}
---
```{r}
---
```{r}
---
```{r}
setwd("D:/STAT/Ajith008.github.io")
---
```{r}
---
```{r}
---
```{r}
---
```{r}
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
source("D:\STAT\Ajith008.github.io\HOTDOG-fin1.R")
library(ggplot2)
library(dplyr)
# Loading the CSV file of the given data
data <- read.csv("competitive_eating_data.csv")
# Loading the CSV file of the given data
data <- read.csv("competitive_eating_data.csv")
# Convert the data to numeric if it's not in numeric form
data$Hot_Dogs_Eaten <- as.numeric(as.character(data$Hot_Dogs_Eaten))
# Handle missing values for female competitors pre-2011 by assigning NA
data <- data %>%
mutate(Hot_Dogs_Eaten = ifelse(Gender == "Female" & Year < 2011, NA, Hot_Dogs_Eaten))
# Plot using ggplot
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, color = Competitor, group = Competitor)) +
# indicate the missing values(NA) using Line plot
geom_line(size = 1.5, na.rm = TRUE) +
# Add points for clarity
geom_point(size = 3) +
# Highlighting the record-breaking performances .i.e(>= 70 hot dogs)
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Add a vertical dashed line to mark the start of the female competition in 2011
geom_vline(xintercept = 2011, linetype = "dashed", color = "red", size = 1.2) +
# Annotate key moments like the start of the female competition and key competitor milestones
annotate("text", x = 2011, y = 40, label = "Female competition starts", size = 3, angle = 90, color = "red", vjust = -0.5) +
annotate("text", x = 2005, y = 60, label = "Kobayashi’s streak", size = 3, color = "black", vjust = 1.5) +
annotate("text", x = 2021, y = 76, label = "Chestnut: 76 hot dogs", size = 3, color = "green", vjust = -1) +
annotate("text", x = 2021, y = 47, label = "Miki Sudo", size = 3, color = "green", vjust = -1) +
annotate("text", x = 2008, y = 61, label = "2008 Tie (Chestnut Wins)", size = 3, color = "black", vjust = -1.5) +
annotate("text", x = 1985, y = 15, label = " ~10  hot dogs in 1980's was typical", size = 3, color = "black", vjust = -1.5) +
# Set plot titles and labels
labs(title = "Professional Eaters performed better Over Time",
subtitle = "Annual performance of competitiotrs",
caption = "Miki Sudo did not compete while pregnant in 2021",
x = "Year",
y = "Hot Dogs Eaten",
color = "Competitor") +
# Set color scale to differentiate competitors
scale_color_manual(values = c("Kobayashi" = "red", "Chestnut" = "yellow", "Sudo" = "green", "Other" = "lightpink")) +
# Adjusting the theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 14),
plot.caption = element_text(size = 10, hjust = 1))
# Loading the CSV file of the given data
data <- read.csv("competitive_eating_data.csv")
# Convert the data to numeric if it's not in numeric form
data$Hot_Dogs_Eaten <- as.numeric(as.character(data$Hot_Dogs_Eaten))
# Handle missing values for female competitors pre-2011 by assigning NA
data <- data %>%
mutate(Hot_Dogs_Eaten = ifelse(Gender == "Female" & Year < 2011, NA, Hot_Dogs_Eaten))
# Plot using ggplot
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, color = Competitor, group = Competitor)) +
# indicate the missing values(NA) using Line plot
geom_line(size = 1.5, na.rm = TRUE) +
# Add points for clarity
geom_point(size = 3) +
# Highlighting the record-breaking performances .i.e(>= 70 hot dogs)
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Add a vertical dashed line to mark the start of the female competition in 2011
geom_vline(xintercept = 2011, linetype = "dashed", color = "red", size = 1.2) +
# Annotate key moments like the start of the female competition and key competitor milestones
annotate("text", x = 2011, y = 40, label = "Female competition starts", size = 3, angle = 90, color = "red", vjust = -0.5) +
annotate("text", x = 2005, y = 60, label = "Kobayashi’s streak", size = 3, color = "black", vjust = 1.5) +
annotate("text", x = 2021, y = 76, label = "Chestnut: 76 hot dogs", size = 3, color = "green", vjust = -1) +
annotate("text", x = 2021, y = 47, label = "Miki Sudo", size = 3, color = "green", vjust = -1) +
annotate("text", x = 2008, y = 61, label = "2008 Tie (Chestnut Wins)", size = 3, color = "black", vjust = -1.5) +
annotate("text", x = 1985, y = 15, label = " ~10  hot dogs in 1980's was typical", size = 3, color = "black", vjust = -1.5) +
# Set plot titles and labels
labs(title = "Professional Eaters performed better Over Time",
subtitle = "Annual performance of competitiotrs",
caption = "Miki Sudo did not compete while pregnant in 2021",
x = "Year",
y = "Hot Dogs Eaten",
color = "Competitor") +
# Set color scale to differentiate competitors
scale_color_manual(values = c("Kobayashi" = "red", "Chestnut" = "yellow", "Sudo" = "green", "Other" = "lightpink")) +
# Adjusting the theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 14),
plot.caption = element_text(size = 10, hjust = 1))
install.packages("ggplot2")
install.packages("dplyr")
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("ggplot2")
install.packages("dplyr")
options(repos = c(CRAN = "https://cloud.r-project.org"))
library(ggplot2)
library(dplyr)
# Loading the CSV file of the given data
data <- read.csv("competitive_eating_data.csv")
# Convert the data to numeric if it's not in numeric form
data$Hot_Dogs_Eaten <- as.numeric(as.character(data$Hot_Dogs_Eaten))
# Handle missing values for female competitors pre-2011 by assigning NA
data <- data %>%
mutate(Hot_Dogs_Eaten = ifelse(Gender == "Female" & Year < 2011, NA, Hot_Dogs_Eaten))
# Plot using ggplot
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, color = Competitor, group = Competitor)) +
# indicate the missing values(NA) using Line plot
geom_line(size = 1.5, na.rm = TRUE) +
# Add points for clarity
geom_point(size = 3) +
# Highlighting the record-breaking performances .i.e(>= 70 hot dogs)
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Add a vertical dashed line to mark the start of the female competition in 2011
geom_vline(xintercept = 2011, linetype = "dashed", color = "red", size = 1.2) +
# Annotate key moments like the start of the female competition and key competitor milestones
annotate("text", x = 2011, y = 40, label = "Female competition starts", size = 3, angle = 90, color = "red", vjust = -0.5) +
annotate("text", x = 2005, y = 60, label = "Kobayashi’s streak", size = 3, color = "black", vjust = 1.5) +
annotate("text", x = 2021, y = 76, label = "Chestnut: 76 hot dogs", size = 3, color = "green", vjust = -1) +
annotate("text", x = 2021, y = 47, label = "Miki Sudo", size = 3, color = "green", vjust = -1) +
annotate("text", x = 2008, y = 61, label = "2008 Tie (Chestnut Wins)", size = 3, color = "black", vjust = -1.5) +
annotate("text", x = 1985, y = 15, label = " ~10  hot dogs in 1980's was typical", size = 3, color = "black", vjust = -1.5) +
# Set plot titles and labels
labs(title = "Professional Eaters performed better Over Time",
subtitle = "Annual performance of competitiotrs",
caption = "Miki Sudo did not compete while pregnant in 2021",
x = "Year",
y = "Hot Dogs Eaten",
color = "Competitor") +
# Set color scale to differentiate competitors
scale_color_manual(values = c("Kobayashi" = "red", "Chestnut" = "yellow", "Sudo" = "green", "Other" = "lightpink")) +
# Adjusting the theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 14),
plot.caption = element_text(size = 10, hjust = 1))
# Set CRAN mirror and ensure necessary packages are installed
options(repos = c(CRAN = "https://cloud.r-project.org"))
# Check if necessary packages are installed
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
library(xts)
# Loading the CSV file of the given data
data <- read.csv("competitive_eating_data.csv")
# Convert the data to numeric if it's not in numeric form
data$Hot_Dogs_Eaten <- as.numeric(as.character(data$Hot_Dogs_Eaten))
# Handle missing values for female competitors pre-2011 by assigning NA
data <- data %>%
mutate(Hot_Dogs_Eaten = ifelse(Gender == "Female" & Year < 2011, NA, Hot_Dogs_Eaten))
#VISUALIZATION1
# Faceted Line Plot for gender-based comparison
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, color = Competitor, group = Competitor)) +
geom_line(size = 1.5, na.rm = TRUE) +  # Line plot for each competitor
geom_point(size = 3) +  # Add points for each year
# Highlight record-breaking performances with larger points
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Facet based on  Gender for a better comparison between male and female trends
facet_wrap(~ Gender, scales = "free_y") +
# Titles and labels
labs(title = "Gender wise Competitive Eating Performance  ",
x = "Year",
y = "Hot Dogs Eaten",
color = "Competitor") +
# Minimal theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
#VISUALIZATION2
# Visualization using Stacked Area Plot for cumulative performance over time
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, fill = Competitor)) +
geom_area(alpha = 0.6, size = 1.2, color = "black", na.rm = TRUE) +  # Stacked areas for cumulative performance
# Highlight record-breaking points
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Titles and labels
labs(title = "Cumulative Performance of Competitive Eaters Over Time",
x = "Year",
y = "Hot Dogs Eaten",
fill = "Competitor") +
# Minimal theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Generate dates from 01 Jan 2024
# The reason for choosing seq.Date() over seq() is seq() is more general function and seq.Date() is specific to create date.
# https://www.geeksforgeeks.org/how-to-generate-a-sequence-of-timestamps-in-r/
# https://rpubs.com/pep1024/date_sequence
date_cases <- seq.Date(from = as.Date("2020-01-01"), to = as.Date("2021-12-31"), by = "day")
num_data<-length(date_cases)
print(num_data)
# Using set.seed(), the sample dataset generated will be reproduced during all execution
set.seed(1)
# Original visual consist of count of number of cases over several months. Hence
# https://www.geeksforgeeks.org/create-random-deviates-of-uniform-distribution-in-r-programming-runif-function/
country_data <- round(runif(num_data, min = 0, max = 200))
# Add missing data of 50 randomly to make the dataset realistic. It is done through randomly selecting few datas and replacing it with NA
# https://www.geeksforgeeks.org/how-to-generate-a-sample-using-the-sample-function-in-r/- Example 5: Random Sampling of List Elements Using sample Function
# syntax: data[sample(1:length(data), size = 4)]
# https://sparkbyexamples.com/r-programming/replace-values-in-r/
NA_data <- sample(1:num_data, size=50)
country_data[NA_data] <- NA
# Create the dataset required for visualization
sample_dataset<- tibble(
Date=date_cases,
Number_of_cases = country_data
)
# Print few sample datasets
head(sample_dataset)
# Save it as .csv file:
write.csv(sample_dataset, "sampleData.csv", row.names = F)
# To plot the cases in each month, we need to take year and month from the Date column.For this we use lubricate library
# We extract the year and month as a numerical value
# https://sqlpad.io/tutorial/extract-year-r-complete-guide/#:~:text=A%3A%20The%20lubridate%20package%20in,due%20to%20its%20intuitive%20functions.
# Refer section: What is the lubridate package and how does it help in extracting years?
sample_dataset <- sample_dataset %>%
mutate(Year = year(Date),
Month = month(Date))
#https://www.stat.berkeley.edu/~s133/dates.html
# Print few sample datasets with Year and Month column added:
str(sample_dataset)
# Calculating 7 day average: In the original model, the 7-day average will be plotted for 2 years
# https://www.geeksforgeeks.org/how-to-calculate-a-rolling-average-in-r/
# https://stackoverflow.com/questions/66415472/calculate-7-day-average-in-r
sample_dataset <- sample_dataset %>%
group_by(Year) %>%
mutate('7-Day avg'= rollmean(Number_of_cases, k=7, fill=NA, na.rm=T)) # Data frame is already passed through pipe operator. na.rm = T is added to ignore the NA values and proceed calculation
str(sample_dataset)
# 1. Visualization using geom smooth
ggplot(sample_dataset, aes(x = Month, y = `7-Day avg`, color = as.factor(Year), group = Year)) +
geom_smooth(se = FALSE, method = "loess", span = 0.2, alpha=0.3) + # standard error wave is set to small
labs(title = "7-Day Average of COVID cases for 2020-2021 (USA)",
x = "Month",
y = "7-Day Average",
color = "Year") +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 120)) +
scale_x_continuous(breaks = 1:12, labels = month.abb)  # https://forum.posit.co/t/converting-number-month-to-month-name/106389
# 2. Visualization using bar graph
# Calculate mean for each month from 7-day average and summarize it to plot monthwise
# https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/summarise
mean_monthly <- sample_dataset %>%
group_by(Year, Month) %>% # group Month and Year for plotting
summarize(monthlyMean = mean(`7-Day avg`, na.rm = TRUE))
# Plotting bar to compare the mean values of each month over 2020 and 2021
ggplot(mean_monthly,aes(x = factor(Month, levels = 1:12, labels = month.abb), y = monthlyMean, fill = as.factor(Year))) + # Converting month into Factors to be plotted in x axis
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.6) +  # Adjusting the size of bars
labs(
title = "Mean (7 day average) of Cases COVID-19-Monthwise - 2020-2021",
x = "Month",
y = "Mean (7 day-average)",
fill = "Year") +
theme_minimal() +
theme(axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text.y = element_text(size = 8),
plot.margin = margin(1, 1, 1, 1, "cm"),  # To reduce the size of the graph
plot.title = element_text(size = 12)) +
theme(plot.title=element_text(hjust=0.5))+
scale_fill_manual(values = c("2020" = "lightblue", "2021" = "orange"))
# Set CRAN mirror to avoid the 'zero-length variable name' error
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("tidyverse")
install.packages("zoo")
install.packages("xts")
install.packages("tidyverse")
install.packages("zoo")
install.packages("xts")
# Set CRAN mirror to avoid the 'zero-length variable name' error
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("tidyverse")
install.packages("zoo")
install.packages("tidyverse")
install.packages("xts")
# Set CRAN mirror to avoid the 'zero-length variable name' error
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("tidyverse")
install.packages("zoo")
install.packages("xts")
install.packages("tidyverse")
# Check if necessary packages are installed
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
library(xts)
# Loading the CSV file of the given data
data <- read.csv("competitive_eating_data.csv")
# Convert the data to numeric if it's not in numeric form
data$Hot_Dogs_Eaten <- as.numeric(as.character(data$Hot_Dogs_Eaten))
# Handle missing values for female competitors pre-2011 by assigning NA
data <- data %>%
mutate(Hot_Dogs_Eaten = ifelse(Gender == "Female" & Year < 2011, NA, Hot_Dogs_Eaten))
#VISUALIZATION1
# Faceted Line Plot for gender-based comparison
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, color = Competitor, group = Competitor)) +
geom_line(size = 1.5, na.rm = TRUE) +  # Line plot for each competitor
geom_point(size = 3) +  # Add points for each year
# Highlight record-breaking performances with larger points
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Facet based on  Gender for a better comparison between male and female trends
facet_wrap(~ Gender, scales = "free_y") +
# Titles and labels
labs(title = "Gender wise Competitive Eating Performance  ",
x = "Year",
y = "Hot Dogs Eaten",
color = "Competitor") +
# Minimal theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Check if necessary packages are installed
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(zoo)
library(lubridate)
library(xts)
# Set CRAN mirror to avoid the 'zero-length variable name' error
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("tidyverse")
install.packages("zoo")
install.packages("xts")
# Loading the CSV file of the given data
data <- read.csv("competitive_eating_data.csv")
# Convert the data to numeric if it's not in numeric form
data$Hot_Dogs_Eaten <- as.numeric(as.character(data$Hot_Dogs_Eaten))
# Handle missing values for female competitors pre-2011 by assigning NA
data <- data %>%
mutate(Hot_Dogs_Eaten = ifelse(Gender == "Female" & Year < 2011, NA, Hot_Dogs_Eaten))
#VISUALIZATION1
# Faceted Line Plot for gender-based comparison
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, color = Competitor, group = Competitor)) +
geom_line(size = 1.5, na.rm = TRUE) +  # Line plot for each competitor
geom_point(size = 3) +  # Add points for each year
# Highlight record-breaking performances with larger points
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Facet based on  Gender for a better comparison between male and female trends
facet_wrap(~ Gender, scales = "free_y") +
# Titles and labels
labs(title = "Gender wise Competitive Eating Performance  ",
x = "Year",
y = "Hot Dogs Eaten",
color = "Competitor") +
# Minimal theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
install.packages("zoo")
install.packages("tidyverse")
install.packages("xts")
#VISUALIZATION2
# Visualization using Stacked Area Plot for cumulative performance over time
ggplot(data, aes(x = Year, y = Hot_Dogs_Eaten, fill = Competitor)) +
geom_area(alpha = 0.6, size = 1.2, color = "black", na.rm = TRUE) +  # Stacked areas for cumulative performance
# Highlight record-breaking points
geom_point(data = subset(data, Hot_Dogs_Eaten >= 70),
aes(x = Year, y = Hot_Dogs_Eaten),
size = 5, shape = 21, fill = "yellow", color = "black", stroke = 1.5) +
# Titles and labels
labs(title = "Cumulative Performance of Competitive Eaters Over Time",
x = "Year",
y = "Hot Dogs Eaten",
fill = "Competitor") +
# Minimal theme for clarity
theme_minimal(base_size = 15) +
theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
# Generate dates from 01 Jan 2024
# The reason for choosing seq.Date() over seq() is seq() is more general function and seq.Date() is specific to create date.
# https://www.geeksforgeeks.org/how-to-generate-a-sequence-of-timestamps-in-r/
# https://rpubs.com/pep1024/date_sequence
date_cases <- seq.Date(from = as.Date("2020-01-01"), to = as.Date("2021-12-31"), by = "day")
num_data<-length(date_cases)
print(num_data)
# Using set.seed(), the sample dataset generated will be reproduced during all execution
set.seed(1)
# Original visual consist of count of number of cases over several months. Hence
# https://www.geeksforgeeks.org/create-random-deviates-of-uniform-distribution-in-r-programming-runif-function/
country_data <- round(runif(num_data, min = 0, max = 200))
# Add missing data of 50 randomly to make the dataset realistic. It is done through randomly selecting few datas and replacing it with NA
# https://www.geeksforgeeks.org/how-to-generate-a-sample-using-the-sample-function-in-r/- Example 5: Random Sampling of List Elements Using sample Function
# syntax: data[sample(1:length(data), size = 4)]
# https://sparkbyexamples.com/r-programming/replace-values-in-r/
NA_data <- sample(1:num_data, size=50)
country_data[NA_data] <- NA
# Create the dataset required for visualization
sample_dataset<- tibble(
Date=date_cases,
Number_of_cases = country_data
)
# Print few sample datasets
head(sample_dataset)
# Save it as .csv file:
write.csv(sample_dataset, "sampleData.csv", row.names = F)
# To plot the cases in each month, we need to take year and month from the Date column.For this we use lubricate library
# We extract the year and month as a numerical value
# https://sqlpad.io/tutorial/extract-year-r-complete-guide/#:~:text=A%3A%20The%20lubridate%20package%20in,due%20to%20its%20intuitive%20functions.
# Refer section: What is the lubridate package and how does it help in extracting years?
sample_dataset <- sample_dataset %>%
mutate(Year = year(Date),
Month = month(Date))
#https://www.stat.berkeley.edu/~s133/dates.html
# Print few sample datasets with Year and Month column added:
str(sample_dataset)
# Calculating 7 day average: In the original model, the 7-day average will be plotted for 2 years
# https://www.geeksforgeeks.org/how-to-calculate-a-rolling-average-in-r/
# https://stackoverflow.com/questions/66415472/calculate-7-day-average-in-r
sample_dataset <- sample_dataset %>%
group_by(Year) %>%
mutate('7-Day avg'= rollmean(Number_of_cases, k=7, fill=NA, na.rm=T)) # Data frame is already passed through pipe operator. na.rm = T is added to ignore the NA values and proceed calculation
str(sample_dataset)
# 1. Visualization using geom smooth
ggplot(sample_dataset, aes(x = Month, y = `7-Day avg`, color = as.factor(Year), group = Year)) +
geom_smooth(se = FALSE, method = "loess", span = 0.2, alpha=0.3) + # standard error wave is set to small
labs(title = "7-Day Average of COVID cases for 2020-2021 (USA)",
x = "Month",
y = "7-Day Average",
color = "Year") +
theme_minimal() +
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(expand = c(0, 0), limits = c(0, 120)) +
scale_x_continuous(breaks = 1:12, labels = month.abb)  # https://forum.posit.co/t/converting-number-month-to-month-name/106389
# 2. Visualization using bar graph
# Calculate mean for each month from 7-day average and summarize it to plot monthwise
# https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/summarise
mean_monthly <- sample_dataset %>%
group_by(Year, Month) %>% # group Month and Year for plotting
summarize(monthlyMean = mean(`7-Day avg`, na.rm = TRUE))
# Plotting bar to compare the mean values of each month over 2020 and 2021
ggplot(mean_monthly,aes(x = factor(Month, levels = 1:12, labels = month.abb), y = monthlyMean, fill = as.factor(Year))) + # Converting month into Factors to be plotted in x axis
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.6) +  # Adjusting the size of bars
labs(
title = "Mean (7 day average) of Cases COVID-19-Monthwise - 2020-2021",
x = "Month",
y = "Mean (7 day-average)",
fill = "Year") +
theme_minimal() +
theme(axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
axis.text.y = element_text(size = 8),
plot.margin = margin(1, 1, 1, 1, "cm"),  # To reduce the size of the graph
plot.title = element_text(size = 12)) +
theme(plot.title=element_text(hjust=0.5))+
scale_fill_manual(values = c("2020" = "lightblue", "2021" = "orange"))
View(data)
View(data)
View(data)
View(data)
